#!/bin/bash
#
# EMUX QEMU Launcher
#
# By Saumil Shah
# The Exploit Laboratory
#
# requires dialog to be installed

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# EMUX (formerly ARMX) by Saumil Shah
# https://emux.exploitlab.net/

EXTRAQEMUOPTS="-no-reboot -nographic -serial mon:stdio -monitor tcp:127.0.0.1:55555,server,nowait"

source /emux/run/utils
check_emux_volume_permissions
uncompress_qemu_roms
uncompress_hostfs
check_if_logging_required
new_log

source /emux/run/parsedevices

hostfs_prefix=/emux/hostfs/hostfs

declare -a choices

j=0

for i in $(seq 0 $((count - 1)))
do
   choices[$j]=$i
   choices[$((j + 1))]=${descs[$i]}
   j=$((j + 2))
done

x=$1 # Get the option from the arg

status=$?
clear

if [ $status -ne 0 ]
then
   exit
fi

cpu=""
dtb=""

if [ "${cpus[$x]}" != "" ]
then
   cpu="-cpu ${cpus[$x]}"
fi

if [ "${dtbs[$x]}" != "" ]
then
   dtb="-dtb /emux/dtb/${dtbs[$x]}"
fi

append=${bootargs[$x]}
hostfs=${hostfs_prefix}-${archs[$x]}.ext2
SYSTEMARCH=$(uname -m)

qemucmd="/emux/run/qemu-bin-${SYSTEMARCH}/${qemus[$x]} -M ${machines[$x]} ${cpu} -m ${mems[$x]} -kernel /emux/${ids[$x]}/kernel/${kernels[$x]} ${dtb} -drive file=${hostfs},${drives[$x]} ${flashargs[$x]} -append \"$append\" -net ${nics[$x]} -net ${nets[$x]} ${customs[$x]} ${EXTRAQEMUOPTS}"
log "[+] QEMU Launch Command"
log "${qemucmd}"

# if the emulated device uses flash memory files and they don't exist,
# check for the presence of a compressed .tar.bz2 file which contains them.
# If the .tar.bz2 doesn't exist, the flash memory files need to be created,
# otherwise QEMU won't run

log "[+] Checking if flash memory files need to be created for ${ids[$x]}"
if [ "${flashfile[$x]}" != "" ]
then
   flashfile0="${flashfile[$x]}0.bin"
   flashfile1="${flashfile[$x]}1.bin"
   if [ ! -f ${flashfile0} ] || [ ! -f  ${flashfile1} ]
   then
      log "[+] flash memory files not found"
      log "[+] checking for compressed flash memory files"
      flashtar="${flashfile[$x]}.tar.bz2"
      if [ -f ${flashtar} ]
      then
         flashdir=$(dirname ${flashtar})
         log "[+] extracting ${flashtar}"
         pv ${flashtar} | tar -C ${flashdir} -jxf -
      else
         log "Creating empty ${flashfile0}"
         mkdir -p $(dirname ${flashfile0})
         dd if=/dev/zero of=${flashfile0} bs=1M count=64
         log "Creating empty ${flashfile1}"
         dd if=/dev/zero of=${flashfile1} bs=1M count=64
      fi
   else
      log "[+] ${flashfile0} found"
      log "[+] ${flashfile1} found"
   fi
else
   log "[+] mtdparts not present"
fi

log "[+] Checking if rootfs needs to be extracted for ${ids[$x]}"
rootfs=$(cat /emux/${ids[$x]}/config | grep 'rootfs=' | cut -d'=' -f2)
rootfsprefix="/emux/${ids[$x]}"
rootfsdir="${rootfsprefix}/${rootfs}"
if [ ! -d ${rootfsdir} ]
then
   rootfstar="${rootfsdir}.tar.bz2"
   if [ ! -f ${rootfstar} ]
   then
      fatalerror "${rootfstar} not present. Cannot continue."
   fi
   log "[+] Extracting ${rootfstar}"
   echo "First run ... extracting ${rootfstar}"
   mkdir -p ${rootfsdir}
   pv ${rootfstar} | sudo tar -C ${rootfsprefix} -jxf -
   log "[+] Done extracting"
fi

# Ensure that the permissions on /emux/ID are set properly
if [ "$(stat -c '%U:%G' /emux/${ids[$x]})" != "r0:r0" ]
then
   echo "Setting permissions for /emux/${ids[$x]}"
   sudo chown -R r0:r0 /emux/${ids[$x]}
fi

cp /emux/run/run-init-template /emux/${ids[$x]}/run-init
cp /emux/run/run-binsh-template /emux/${ids[$x]}/run-binsh

echo ${ids[$x]} > /tmp/emuxrunning

if [ "$CONSOLELOGFILE" ]
then
   script -a -f -c "${qemucmd}" ${CONSOLELOGFILE}
else
   eval "$qemucmd"
fi